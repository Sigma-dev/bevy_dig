Steps to MVP:
Step 1 Get one editable chunk to reliably generate: X
 - Get one editable chunk to unreliably generate V

Step 2 Make a character controller that can walk and collide with it
 - Try a traditional physics approach




Keep in mind:
There must be no freezes while editing the terrain, and the game should be able to play at 144hz easily.

Performance tricks available:
Splitting the terrain into smaller size
Keep the mesh data on the GPU side and approximate collisions with the voxel data

EndGame DataModel: 
A ChunkedWorld struct is created given a certain UVec3 representing the number of chunks in each dimension
The data is represented as a single large statically sized array.
All spatial operations first directly gets an intermediate slice of the aabb of the operation. This AABB should be determined by directly slicing the array at the correct indices rather than a distance check.

Approach A: One entity for all chunks
Chunked world would live on an entity. There would be another component ModifiedChunks that tracks which chunks have been affected, since all operations on the ChunkedWorld return the affected chunks.
A system would listen to ModifiedChunks changes,  ask ChunkedWorld for the data for each chunk and then add that data to a queue of chunks to be computed in a resource holding (ChunkIndex UVec3, ChunkData)[].
In the render world, that queue is copied, and each frame, the first in the queue is processed. (This might need to be adjusted if multiple cannot be run at the same time, we would only run a new one if the readback object has destroyed itself).
Then each readback would create the deduplicated mesh and send it as an event with (ChunkIndex UVec3,, ChunkMesh).
Then a system reads these events and creates the meshes or updates them if they already exist

Pros:
- Easy to stitch chunks together

Cons:
- Complicates the code
- Performance concerns
- Less flexible for other applications


Approach B: One entity per chunk with one overseer

Overseer:
Only holds the entity ids of the chunks with their index somehow and the list of commands set this frame.
It is the point of entry for all the commands (dig, build).
At the end of every frame (PostUpdate), it processes each command, finding which chunks would be affected, and sending the command as a local space command for the chunks.

Chunks:
Just holds the data and a mesh handle, needs to be positionned correctly
A system listens to it's changes and creates the mesh and sends a ChunkMesh with the index, then the chunk gets the mesh and adds it to it's handle.

Pros:
- Simple
- Flexible (could apply more easily to other projects or larger changes)

Cons:
- Harder to stitch chunks together (OnChange, would need to query the overseer for it's neighbors, then access their data and put all of that in the buffer)

Approach C (CURRENT CHOICE): One entity per chunk with a system param

ChunksManager:
Handles the creation and modification of the voxel world.
Methods:
- create_chunks(amount: UVec3, scale: f32), that wipes existing chunks and creates the required chunks
- set_sphere(world_pos_center: Vec3, size: f32, state: boolean) -> converts the query in global voxel coordinates, then gets all the affected chunks, transforms the query in local voxel coordinates and affects them.
- dig -> set_sphere_false()
- build -> set_sphere_true()

Chunks:
Holds a chunk index (UVec3) the data and a mesh handle, needs to be positionned correctly.
A system listens to it's changes and creates the mesh and sends a ChunkMesh with the index, then the chunk gets the mesh and adds it to it's handle.

Pros:
- Very Simple
- Flexible (could apply more easily to other projects or larger changes)

Cons:
- Harder to stitch chunks together (OnChange, would need to query the overseer for it's neighbors, then access their data and put all of that in the buffer)
- Would probably be hard to have multiple chunk systems at the same time (not a problem in this and 90% of projects)